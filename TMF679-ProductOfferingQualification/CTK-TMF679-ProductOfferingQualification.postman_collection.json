{
	"info": {
		"_postman_id": "7680af4c-e1d7-4169-8b89-cc9567867e1f",
		"name": "CTK-TMF679-ProductOfferingQualification",
		"description": "This is Swagger UI environment generated for the TMF Trouble Ticket specification",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "2831eb4a-0aba-4782-8585-e60c495b9589",
			"name": "TC_ProductOfferingQualification_N1 â€“ Create new ProductOfferingQualification with minimum required information",
			"item": [
				{
					"_postman_id": "01fa4dcf-baed-4765-9f22-032535462bd8",
					"name": "Create a ProductOffer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66f84ce7-6846-4c2e-b62a-f8dd7702ff2b",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/troubleTicket/v2/troubleTicket",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 201-Created",
									"pm.test(\"Status code is 201 (Conformance Profile page 16)\", function () { pm.response.to.have.status(201); });",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"      ",
									"      pm.globals.set(\"IDPOQ1\", instance.id);",
									"    pm.globals.set(\"HREFPOQ1\", instance.href);",
									"    pm.globals.set(\"STATEPOQ1\", instance.state);",
									"    pm.globals.set(\"RELATEDPARTYIDPOQ1\", instance.relatedParty[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\", instance.productOfferingQualificationItem[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONDATETIMEPOQ1\", instance.productOfferingQualificationDateTime);",
									"    ",
									"",
									"    ",
									"    var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    ",
									"    pm.globals.set(\"IDPOQ1\", instance.id);",
									"    pm.globals.set(\"HREFPOQ1\", instance.href);",
									"    pm.globals.set(\"STATEPOQ1\", instance.state);",
									"    pm.globals.set(\"RELATEDPARTYIDPOQ1\", instance.relatedParty[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\", instance.productOfferingQualificationItem[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONDATETIMEPOQ1\", instance.productOfferingQualificationDateTime);",
									"    ",
									"",
									"    ",
									"    var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"qualification for productOffering\",\n\t\"expectedQualificationDate\": \"2017-09-21T12:00:00Z\",\n\t\"provideAlternative\": true,\n\t\"provideOnlyAvailable\": false,\n\t\"provideUnavailabilityReason\": true,\n\t\"productOfferingQualificationItem\": [\n\t\t{\n\t\t\"id\": \"1\",\n\t\t\"expectedActivationDate\": \"2017-10-04T12:00:00Z\",\n\t\t\"note\": [\n\t\t\t{\n\t\t\t\"date\": \"2017-10-02T00:00\",\n\t\t\t\"author\": \"Dr. Jeckill\",\n\t\t\t\"text\": \"This is quite important\"\n\t\t\t}\n\t\t],\n\t\t\"productOffering\": {\n\t\t\"id\": \"7431\",\n\t\t\"href\": \" https://host:port/productOffering/productOffering/7431 \",\n\t\t\"name\": \"Virtual Storage Medium\"\n\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"2\",\n\t\t\t\"expectedActivationDate\": \"2017-10-11T12:00:00Z\",\n\t\t\t\"productOffering\": {\n\t\t\t\t\"id\": \"66\",\n\t\t\t\t\"href\": \" https://host:port/productOffering/productOffering/66 \",\n\t\t\t\t\"name\": \"Mobile A+ Tariff Plan\"\n\t\t\t}\n\t\t}\n\t],\n\t\"relatedParty\": [\n\t\t{\n\t\t\"id\": \"14\",\n\t\t\"href\": \" https://host:port/partyManagement/individual/14 \",\n\t\t\"role\": \"customer\",\n\t\t\"name\": \"Jean Pontus\"\n\t\t}\n\t],\n\t\"channel\": {\n\t\t\"id\": \"1\",\n\t\t\"href\": \" https://host:port/productCatalogManagement/channel/1 \",\n\t\t\"name\": \"Online Channel\"\n\t}\n}"
						},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "6d0708e8-cdef-4d84-9d12-c9c58d490092",
					"name": "Get ID1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7f51107-e019-4fb5-8cb5-886a75d5975d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    ",
									"    var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"     var instance = pm.response.json();",
									"",
									"    ",
									"   var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"  ",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification/{{IDPOQ1}}",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification",
								"{{IDPOQ1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "77de68cc-1d5d-4659-9f15-01a63f8870e6",
			"name": "TC_ProductOfferingQualification_N2 â€“ Create new ProductOfferingQualification with minimum set of parameters supported by server",
			"item": [
				{
					"_postman_id": "f4cf6710-8108-4667-9308-a4510d812172",
					"name": "Create a ProductOffer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47508b54-ebca-40ce-8cb6-cfae35bbdef6",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"// Testing POST method on {{scheme}}://{{host}}:{{port}}/tmf-api/troubleTicket/v2/troubleTicket",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 201-Created",
									"pm.test(\"Status code is 201 (Conformance Profile page 16)\", function () { pm.response.to.have.status(201); });",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"      ",
									"      pm.globals.set(\"IDPOQ2\", instance.id);",
									"    pm.globals.set(\"HREFPOQ2\", instance.href);",
									"    pm.globals.set(\"STATEPOQ2\", instance.state);",
									"    pm.globals.set(\"RELATEDPARTYIDPOQ2\", instance.relatedParty[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ2\", instance.productOfferingQualificationItem[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONDATETIMEPOQ2\", instance.productOfferingQualificationDateTime);",
									"    ",
									"",
									"    ",
									"    var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    ",
									"    pm.globals.set(\"IDPOQ2\", instance.id);",
									"    pm.globals.set(\"HREFPOQ2\", instance.href);",
									"    pm.globals.set(\"STATEPOQ2\", instance.state);",
									"    pm.globals.set(\"RELATEDPARTYIDPOQ2\", instance.relatedParty[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ2\", instance.productOfferingQualificationItem[0].id);",
									"    pm.globals.set(\"PRODUCTOFFERINGQUALIFICATIONDATETIMEPOQ2\", instance.productOfferingQualificationDateTime);",
									"    ",
									"",
									"    ",
									"    var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"description\": \"qualification for productOffering\",\n\"expectedQualificationDate\": \"2017-10-05T12:00:00Z\",\n\"provideAlternative\": false,\n\"provideOnlyAvailable\": true,\n\"provideUnavailabilityReason\": false,\n\"productOfferingQualificationItem\": [\n{\n\"id\": \"1\",\n\"expectedActivationDate\": \"2017-10-11T12:00:00Z\",\n\"category\": {\n\"id\": \"21\",\n\"href\": \" https://host:port/productOffering/category/21 \",\n\"version\": \"1.0\",\n\"name\": \"Data Bundle for Mobile\"\n}\n}\n],\n\"relatedParty\": [\n{\n\"id\": \"24\",\n\"href\":\n\"https://host:port/partyManagement/individual/24\",\n\"role\": \"customer\",\n\"name\": \"Jean-Luc Tymen\"\n}\n],\n\"channel\": {\n\"id\": \"3\",\n\"href\":\n\"https://host:port/productCatalogManagement/channel/3\",\n\"name\": \"Online Channel\"\n}\n}"
						},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "95c17bba-5005-44d5-9433-63ed68f79c18",
					"name": "Get ID2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef2f39f4-837a-420f-8b57-1ac90c464000",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    ",
									"    var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ2\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ2\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"     var instance = pm.response.json();",
									"",
									"    ",
									"   var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    ",
									"    pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"        pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"    });",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ2\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ2\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"  ",
									"}",
									"",
									"pm.test(\"ID2 found on body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDPOQ2\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification/{{IDPOQ2}}",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification",
								"{{IDPOQ2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "f4380037-d83d-4d79-b8a8-8213386e20a9",
			"name": "TC_ProductOfferingQualification_N3 â€“ Search for ProductOfferingQualification s with specific characteristics",
			"item": [
				{
					"_postman_id": "2d065369-73e0-4532-919b-b347eb4bde15",
					"name": "List all ProductOfferingQualification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2e0f753-6e03-4353-9c60-435aafc9a8b4",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    ",
									"    ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        ",
									"        var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"        // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        ",
									"        pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        ",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"        pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"            pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"        });",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"        // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        ",
									"        pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        ",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"        pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"            pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"        });",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ2\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ2\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"     var instance = pm.response.json();",
									"",
									"    ",
									"  ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"         var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"        // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        ",
									"        pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        ",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"        pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"            pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"        });",
									"        ",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        ",
									"         var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"        // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        ",
									"        pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        ",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"        pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"            pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"        });",
									"        ",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ2\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ2\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ2\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ2\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"  ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"ID 1 Found on Body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get('IDPOQ1'));",
									"});",
									"",
									"pm.test(\"ID 2 Found on Body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get('IDPOQ2'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification/",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification",
								""
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "5f40fb8a-2b17-4020-a9c0-5538dd6ed510",
					"name": "Filter by expectedQualificationDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6664c0-4144-47d1-87cb-3258a60c7cbd",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"        // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        ",
									"        pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        ",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"        pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"            pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"        });",
									"        ",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID2 should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"    ",
									"    }",
									"    ",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"     var instance = pm.response.json();",
									"",
									"    ",
									"  ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        ",
									"         var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"        // Checking all remaining possible attributes for TroubleTicket, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        ",
									"        pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        ",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"        pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"            pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"        });",
									"        ",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID2 should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"    ",
									"    }",
									"    ",
									"  ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"ID 1 Found on Body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get('IDPOQ1'));",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification?expectedQualificationDate=\"2017-09-21T12:00:00Z\"",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification"
							],
							"query": [
								{
									"key": "expectedQualificationDate",
									"value": "\"2017-09-21T12:00:00Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "a85d4ffa-3d61-465b-9850-90c05597e6e9",
					"name": "Filter by relatedParty.id=\"14\"&relatedParty.role=\"customer\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7789748-46a1-4e2d-9a38-51ec604217d0",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    ",
									"    ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"        ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        ",
									"        pm.test('Response has relatedParty attribute', function() { pm.expect(instance.relatedParty).to.be.a('array'); });",
									"        ",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"        pm.test('Response has productOfferingQualificationDateTime attribute', function() {",
									"            pm.expect(instance.productOfferingQualificationDateTime).to.be.a('string');",
									"        });",
									"        ",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID2 should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"    ",
									"    }",
									"    ",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"     var instance = pm.response.json();",
									"",
									"     var requiredAttributes = [ 'relatedParty', 'productOfferingQualificationItem', 'id', 'href', 'productOfferingQualificationDateTime', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"   ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        pm.test('ticketType equal Post', function(){",
									"           pm.expect(instance.ticketType).to.eql(pm.globals.get(\"TICKETTYPEPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('severity equal Post', function(){",
									"           pm.expect(instance.severity).to.eql(pm.globals.get(\"SERVERITYPOQ1\"));",
									"            ",
									"        });",
									"        pm.test('productOfferingQualificationItem equal Post', function(){",
									"           pm.expect(instance.productOfferingQualificationItem[0].id).to.eql(pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONIDPOQ1\"));",
									"            ",
									"        });",
									"        ",
									"        pm.test('relatedParty equal Post', function(){",
									"           pm.expect(instance.relatedParty[0].id).to.eql(pm.globals.get(\"RELATEDPARTYIDPOQ1\"));",
									"            ",
									"        });",
									"    ",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID2 (' + pm.globals.get(\"IDPOQ2\") +') should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"    ",
									"    }",
									"    ",
									"  ",
									"}",
									"",
									"",
									"pm.test(\"ID 1 Found on Body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get('IDPOQ1'));",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification?relatedParty.id=\"14\"&relatedParty.role=\"customer\"",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification"
							],
							"query": [
								{
									"key": "relatedParty.id",
									"value": "\"14\""
								},
								{
									"key": "relatedParty.role",
									"value": "\"customer\""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "32ee8c04-94bf-4070-9c60-69964c51476c",
			"name": "TC_ProductOfferingQualification_N4 â€“ Filtered retrieval of ProductOfferingQualification",
			"item": [
				{
					"_postman_id": "4bf92b6f-66ee-475d-aa56-aab84d732ef5",
					"name": "{{ProductOfferingQualificationAPI}}/productOfferingQualification/{{IDPOQ1}}?fields=id, state,productOfferingQualificationItem.state,productOfferingQualificationItem.qualificationItemResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5603b706-2866-432c-9568-77057d4d37be",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    ",
									"    var requiredAttributes = [ 'productOfferingQualificationItem', 'id', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string'); });",
									"    instance.productOfferingQualificationItem.forEach((item, index) => {",
									"       pm.test('productOfferingQualificationItem['+index+'] has state', function(){",
									"          pm.expect(item.state).to.be.a('string'); ",
									"       });",
									"       pm.test('productOfferingQualificationItem['+index+'] has qualificationItemResult', function(){",
									"          pm.expect(item.qualificationItemResult).to.be.a('string'); ",
									"       });",
									"    });",
									"   pm.test('Only filtered attributes on body', function(){",
									"           pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length);",
									"            ",
									"        });",
									"    ",
									"    ",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"            ",
									"        ",
									"    ",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID 2 should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"        ",
									"    }",
									"    ",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"     var instance = pm.response.json();",
									"",
									"    ",
									"  var requiredAttributes = [ 'productOfferingQualificationItem', 'id', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string'); });",
									"    instance.productOfferingQualificationItem.forEach((item, index) => {",
									"       pm.test('productOfferingQualificationItem['+index+'] has state', function(){",
									"          pm.expect(item.state).to.be.a('string'); ",
									"       });",
									"       pm.test('productOfferingQualificationItem['+index+'] has qualificationItemResult', function(){",
									"          pm.expect(item.qualificationItemResult).to.be.a('string'); ",
									"       });",
									"    });",
									"",
									"       pm.test('Only filtered attributes on body', function(){",
									"           pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length);",
									"            ",
									"        });",
									"    ",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"            ",
									"        ",
									"    ",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID 2 should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"        ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    ",
									"  ",
									"}",
									"",
									"",
									"pm.test(\"ID 1 Found on Body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get('IDPOQ1'));",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification/{{IDPOQ1}}?fields=id,\nstate,productOfferingQualificationItem.state,productOfferingQualificationItem.qualificationItemResult",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification",
								"{{IDPOQ1}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "id,\nstate,productOfferingQualificationItem.state,productOfferingQualificationItem.qualificationItemResult"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "2ca7a30e-e719-4010-8b0d-ad979d6ff1b5",
			"name": "TC_ProductOfferingQualification_N5 â€“ Filtered Search and Filtered data response",
			"item": [
				{
					"_postman_id": "888efd52-76da-4b1d-94f6-f9470bae3ba3",
					"name": "{{ProductOfferingQualificationAPI}}/productOfferingQualification?channel.id=\"1\"&fields=id,state",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31d9e7ab-061e-4b6b-bc66-e7fd4584b99b",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									"// Parse the JSON response",
									"var jsonData = pm.response.json();",
									"// TODO: jsonData might be an array of resources - need to detect and iterate if so",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"  jsonData.forEach(function(instance, index) {",
									"    ",
									"    var requiredAttributes = [ 'id', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string'); });",
									"     pm.test('Only filtered attributes on body', function(){",
									"           pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length);",
									"            ",
									"        });",
									"    ",
									"    ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"            ",
									"        ",
									"    ",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID 2 should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"        ",
									"    }",
									"    ",
									"    ",
									"    ",
									"  });",
									"}",
									"else {",
									"     var instance = pm.response.json();",
									"",
									"    ",
									"  var requiredAttributes = [ 'productOfferingQualificationItem', 'id', 'state' ];",
									"        pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"",
									"    ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance.state).to.be.a('string'); });",
									"    instance.productOfferingQualificationItem.forEach((item, index) => {",
									"       pm.test('productOfferingQualificationItem['+index+'] has state', function(){",
									"          pm.expect(item.state).to.be.a('string'); ",
									"       });",
									"       pm.test('productOfferingQualificationItem['+index+'] has qualificationItemResult', function(){",
									"          pm.expect(item.qualificationItemResult).to.be.a('string'); ",
									"       });",
									"    });",
									"       pm.test('Only filtered attributes on body', function(){",
									"           pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length);",
									"            ",
									"        });",
									"    ",
									"    ",
									"    ",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance.productOfferingQualificationItem).to.be.a('array'); });",
									"    ",
									"    ",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDPOQ1\")){",
									"        ",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"        pm.test('state equal Post', function(){",
									"           pm.expect(instance.state).to.eql(pm.globals.get(\"STATEPOQ1\"));",
									"            ",
									"        });",
									"           ",
									"        ",
									"            ",
									"        ",
									"    ",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ2\")){",
									"        ",
									"        pm.test('ID 2 should not be returned by this GET', function(){",
									"            pm.expect(0).to.eql(1);",
									"            ",
									"        });",
									"           ",
									"        ",
									"        ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    ",
									"  ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"ID 1 Found on Body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get('IDPOQ1'));",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification?channel.id=\"1\"&fields=id,state",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification"
							],
							"query": [
								{
									"key": "channel.id",
									"value": "\"1\""
								},
								{
									"key": "fields",
									"value": "id,state"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "c8409d67-8af9-4042-b226-11e8a4e258d6",
			"name": "TC_ProductOfferingQualification_E1 â€“ Unknown Trouble ProductOfferingQualification identifier",
			"item": [
				{
					"_postman_id": "cfd58729-e820-4a25-9f5b-64f76b903585",
					"name": "Error 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fbe3dd5-c21c-4fad-81ec-84f390edb179",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification/2313123",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification",
								"2313123"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "eddf3520-da44-49fb-b8d5-749bf51203db",
			"name": "TC_ProductOfferingQualification_E2 â€“ Invalid Request â€“ Missing mandatory parameter",
			"item": [
				{
					"_postman_id": "e6d96a81-d224-4297-9a0b-6637724c4163",
					"name": "Error 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a320436b-50aa-42c8-97ea-11fd840fba6c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"qualification for productOffering\",\n\t\"expectedQualificationDate\": \"2017-10-05T12:00:00Z\",\n\t\"provideAlternative\": true,\n\t\"provideOnlyAvailable\": false,\n\t\"provideUnavailabilityReason\": true,\n\t\"relatedParty\": [\n\t\t{\n\t\t\t\"id\": \"14\",\n\t\t\t\"role\": \"customer\",\n\t\t\t\"name\": \"Jean Pontus\"\n\t\t}\n\t],\n\t\"channel\": {\n\t\t\"id\": \"1\",\n\t\t\"name\": \"Online Channel\"\n\t}\n}"
						},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "3a677793-23be-488f-91d8-6cd18424b11f",
			"name": "TC_ProductOfferingQualification _E3 â€“ Invalid Request â€“ Missing parameter mandatory in context",
			"item": [
				{
					"_postman_id": "2a481659-3119-4854-a93f-036760d1f03c",
					"name": "Error 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a320436b-50aa-42c8-97ea-11fd840fba6c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test('GET response has valid JSON body', function() { pm.response.to.have.jsonBody() });",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"qualification for productOffering\",\n\t\"expectedQualificationDate\": \"2017-10-05\",\n\t\"provideAlternative\": true,\n\t\"provideOnlyAvailable\": false,\n\t\"provideUnavailabilityReason\": true\n}"
						},
						"url": {
							"raw": "{{ProductOfferingQualificationAPI}}/productOfferingQualification",
							"host": [
								"{{ProductOfferingQualificationAPI}}"
							],
							"path": [
								"productOfferingQualification"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}